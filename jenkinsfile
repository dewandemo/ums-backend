pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'main', credentialsId: 'coderepocreds', url: 'https://gitness.k3s-vm-sandbox.bclumswvx3it.instruqt.io/git/my_project/my-backend-service.git'
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('Static Code Analysis') {
            parallel {
                stage('Checkstyle') {
                    when {
                expression { return params.RUN_CHECKSTYLE == 'true' }
            }
                    steps {
                        // Run Checkstyle
                        sh "mvn checkstyle:check"
                    }
                }
                stage('OWASP Dependency-Check') {
                    steps {
                        // Run OWASP Dependency-Check
                        sh "mvn org.owasp:dependency-check-maven:check"
                    }
                }
            }
        }

        stage('Generate JaCoCo Report') {
            steps {
                script {
                    // Assuming JaCoCo exec file is in the default location
                    jacoco(execPattern: 'target/*.exec')
                }
            }
        }
        
        stage('Code Coverage') {
            steps {
                recordCoverage(
                    tools: [[parser: 'JACOCO']],
                    id: 'jacoco', 
                    name: 'JaCoCo Coverage',
                    sourceCodeRetention: 'EVERY_BUILD',
                    qualityGates: [
                        [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],
                        [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]
                    ]
                )
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                // Build Docker image
                script {
                    withCredentials([string(credentialsId: 'imagerepocreds', variable: 'imagerepocreds')]) {
                        sh 'docker login harbor.k3s-vm-sandbox.bclumswvx3it.instruqt.io -u admin -p ${imagerepocreds}'
                        sh 'docker build -t dewandemo/ums-backend:${BUILD_NUMBER} .'
                        sh 'docker tag dewandemo/ums-backend:${BUILD_NUMBER} harbor.k3s-vm-sandbox.bclumswvx3it.instruqt.io/ums-backend/ums-backend:${BUILD_NUMBER}'
                        sh 'docker push harbor.k3s-vm-sandbox.bclumswvx3it.instruqt.io/ums-backend/ums-backend:${BUILD_NUMBER}'
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                // Publish JUnit test results
                junit '**/target/surefire-reports/TEST-*.xml'
            }
        }
        unstable {
            script {
                // Publish JUnit test results even if the build is unstable
                junit '**/target/surefire-reports/TEST-*.xml'
            }
        }
        // Archive the jar file
        always {
            archiveArtifacts 'target/*.jar'
        }
    }
}
